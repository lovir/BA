<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<mapper namespace="sales">
	
	<!-- 페이징 sql -->
	<sql id="pagingHeader">
		SELECT b.* FROM (
			select A.ROWNUM rn, A.* FROM (
	</sql>
	<sql id="pagingFooter">
			) A
		) b WHERE rn BETWEEN #{start} AND #{end}
	</sql>
	
	<insert id="insertSales">
        insert into sales (sales_member, pid, purchase_name, purchase_amount, payment_amount, purchase_date, expected_date, upper_member,  status, regdate) values
        (#{sales_member}, #{pid}, #{purchase_name}, 
        	(select product_price from product where pid=#{pid}),
			(select payment_amount from product where pid=#{pid}),
        STR_TO_DATE (#{purchase_date}, '%Y-%m-%d'), STR_TO_DATE (#{expected_date}, '%Y-%m-%d'),
        #{upper_member},  #{status}, now())
    </insert> 
    <insert id="insertSalesEtc">
        insert into sales (sales_member, pid, purchase_name, purchase_amount, payment_amount, purchase_date, expected_date, upper_member,  status, regdate) values
        (#{sales_member}, #{pid}, #{purchase_name}, 
         #{purchase_amount}, #{payment_amount}, 
         STR_TO_DATE (#{purchase_date}, '%Y-%m-%d'), STR_TO_DATE (#{expected_date}, '%Y-%m-%d'),
        #{upper_member},  #{status}, now())
    </insert>
    <update id="updateSales" >
        update sales set
         sales_member = #{sales_member}, pid=#{pid}, purchase_name=#{purchase_name}, 
             purchase_amount = (select product_price from product where pid=#{pid}), 
	         payment_amount = (select payment_amount from product where pid=#{pid}),
         purchase_date = STR_TO_DATE (#{purchase_date}, '%Y-%m-%d'), expected_date = STR_TO_DATE (#{expected_date}, '%Y-%m-%d'),
         upper_member = #{upper_member},  status=#{status},
         updatedate = now()
        where seq = #{seq}
    </update>
    <update id="updateSalesEtc" >
        update sales set
         sales_member = #{sales_member}, pid=#{pid}, purchase_name=#{purchase_name}, 
         purchase_amount = #{purchase_amount}, payment_amount = #{payment_amount}, 
         purchase_date = STR_TO_DATE (#{purchase_date}, '%Y-%m-%d'), expected_date = STR_TO_DATE (#{expected_date}, '%Y-%m-%d'),
         upper_member = #{upper_member},  status=#{status},
         updatedate = now()
        where seq = #{seq}
    </update>
    <insert id="insertPayment">
        insert into payment (sales_seq, amount_date, member_id, payment_amount, status, regdate) values
        ((select max(seq) from sales), STR_TO_DATE (#{expected_date}, '%Y-%m-%d'), #{upper_member}, 
        	(select payment_amount * 0.2 from product where pid=#{pid}), 
        #{status}, now())
    </insert>
    <insert id="insertPaymentEtc">
        insert into payment (sales_seq, amount_date, member_id, payment_amount, status, regdate) values
        ((select max(seq) from sales), STR_TO_DATE (#{expected_date}, '%Y-%m-%d'), #{upper_member}, 
			#{payment_amount} * 0.2,
       #{status}, now())
    </insert>
    <update id="updatePayment" >
        update payment set
         amount_date=STR_TO_DATE (#{expected_date}, '%Y-%m-%d'), member_id = #{upper_member}, 
          	payment_amount = (select payment_amount * 0.2 from product where pid=#{pid}), 
         status=#{status}, updatedate = now()
        where sales_seq = #{seq}
    </update>
     <update id="updatePaymentEtc" >
        update payment set
         amount_date=STR_TO_DATE (#{expected_date}, '%Y-%m-%d), member_id = #{upper_member}, 
			payment_amount = #{payment_amount} * 0.2,
        status=#{status}, updatedate = now()
        where sales_seq = #{seq}
    </update>
    <delete id="deleteSales">
        delete from sales where seq = #{seq}
    </delete>
    <select id="selectAll" resultType="com.example.spring02.model.sales.dto.SalesVO">
    	 <!-- 페이징 -->
    	 <include refid="pagingHeader"></include>
        select 
	        @ROWNUM := @ROWNUM + 1 AS ROWNUM, s.*, 
	        (select product_name from product p where s.pid=p.pid) as product_name
	    from sales s, (SELECT @ROWNUM := 0) R order by s.seq desc
        <!-- 페이징 -->
		<include refid="pagingFooter"></include>	
    </select>
    <!-- 02_02. 레코드 갯수 -->
	<select id="countSales" resultType="int">
		SELECT COUNT(*) 
		FROM 
			sales
	</select>
    <select id="detailView" resultType="com.example.spring02.model.sales.dto.SalesVO">
		SELECT 
			 s.*,
			 (select name from member a where a.userid = s.sales_member) as sales_member_name,
			 (select name from member a where a.userid = s.upper_member) as upper_member_name
		FROM sales s
		WHERE s.seq = #{seq} 
	</select>
	
	<select id="paymentList" resultType="com.example.spring02.model.payment.dto.PaymentVO">
    	<choose>
			<!-- 검색옵션이 전체 검색일 경우 -->
			<when test="strStatus == '구매'">
			select p.amount_date, sum(p.payment_amount) as payment_amount, p.member_id, m.account, m.name as member_name, p.status from
			(
			select amount_date, sum(payment_amount) as payment_amount, member_id, status from payment where status in ('구매') group by amount_date, member_id
			union all
			select expected_date as amount_date, sum(payment_amount) as payment_amount, sales_member as member_id, status from sales where status in ('구매') group by expected_date, sales_member
			) p, member m where p.member_id = m.userid group by p.amount_date, p.member_id, m.account, m.name , p.status  
			</when>
			<!-- 전체 검색이 아닐 경우 -->
			<otherwise>
			select p.amount_date, sum(p.payment_amount) as payment_amount, p.member_id, m.account, m.name as member_name, p.status from
			(
			select amount_date, sum(payment_amount) as payment_amount, member_id, status from payment where status in ('구매','지급완료') group by amount_date, member_id
			union all
			select expected_date as amount_date, sum(payment_amount) as payment_amount, sales_member as member_id, status from sales where status in ('구매','지급완료') group by expected_date, sales_member
			) p, member m where p.member_id = m.userid group by p.amount_date, p.member_id, m.account, m.name , p.status 
			</otherwise>
		</choose>
	</select>
	
</mapper>
